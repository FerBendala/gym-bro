// Funci√≥n serverless de Netlify para el chat
// Esta funci√≥n proporciona respuestas inteligentes basadas en palabras clave

const fetch = require('node-fetch');

// Funci√≥n de fallback inteligente basada en palabras clave
function generateFallbackResponse(message, userContext) {
  const messageLower = message.toLowerCase();
  
  // Respuestas predefinidas basadas en palabras clave
  const responses = {
    'hola': '¬°Hola! Soy GymBro, tu entrenador personal. ¬øEn qu√© puedo ayudarte hoy?',
    'ejercicio': 'Los ejercicios son fundamentales para tu salud. ¬øQu√© tipo de entrenamiento te interesa?',
    'peso': 'El control del peso es importante. ¬øTe refieres a peso corporal o peso en ejercicios?',
    'nutrici√≥n': 'La nutrici√≥n es clave para tus resultados. ¬øQu√© aspecto espec√≠fico te interesa?',
    'motivaci√≥n': 'La motivaci√≥n es esencial. Recuerda que cada entrenamiento te acerca a tus metas.',
    't√©cnica': 'La t√©cnica correcta es crucial para evitar lesiones y maximizar resultados.',
    'rutina': 'Una buena rutina es la base del progreso. ¬øQu√© objetivos tienes?',
    'salud': 'Tu salud es lo m√°s importante. ¬øHay algo espec√≠fico que te preocupe?',
    'bienestar': 'El bienestar integral incluye ejercicio, nutrici√≥n y descanso.',
    'entrenamiento': 'El entrenamiento consistente es la clave del √©xito. ¬øQu√© te gustar√≠a mejorar?',
    'fuerza': 'La fuerza es fundamental. ¬øQuieres mejorar tu fuerza general o espec√≠fica?',
    'resistencia': 'La resistencia cardiovascular es clave. ¬øTe interesa cardio o resistencia muscular?',
    'flexibilidad': 'La flexibilidad mejora el rendimiento y previene lesiones. ¬øQuieres estiramientos espec√≠ficos?',
    'descanso': 'El descanso es tan importante como el entrenamiento. ¬øNecesitas consejos sobre recuperaci√≥n?',
    'progreso': 'El progreso requiere consistencia y paciencia. ¬øQuieres evaluar tu progreso actual?'
  };
  
  // Buscar palabras clave en el mensaje
  for (const [keyword, response] of Object.entries(responses)) {
    if (messageLower.includes(keyword)) {
      return response;
    }
  }
  
  // Respuesta gen√©rica si no se encuentra ninguna palabra clave
  return `¬°Hola! Soy GymBro, tu entrenador personal.

Veo que me has preguntado: "${message}"

Actualmente estoy en modo de configuraci√≥n mientras se carga mi modelo de IA avanzado. Por favor, intenta de nuevo en unos minutos cuando el sistema est√© completamente operativo.

Mientras tanto, puedo ayudarte con preguntas b√°sicas sobre:
- Ejercicios y t√©cnicas
- Nutrici√≥n y alimentaci√≥n
- Motivaci√≥n y mentalidad
- Rutinas de entrenamiento
- Salud y bienestar
- Fuerza y resistencia
- Flexibilidad y descanso

¬øEn qu√© puedo asistirte?`;
}

exports.handler = async (event, context) => {
  // Configurar CORS
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
    'Content-Type': 'application/json',
  };

  // Manejar preflight requests
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: '',
    };
  }

  try {
    // Solo permitir POST requests
    if (event.httpMethod !== 'POST') {
      return {
        statusCode: 405,
        headers,
        body: JSON.stringify({ error: 'Method not allowed' }),
      };
    }

    // Parsear el body de la request
    const requestBody = JSON.parse(event.body);
    const { message, context: userContext, reasoning_level = 'medium' } = requestBody;

    if (!message) {
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ error: 'Message is required' }),
      };
    }

    console.log('ü§ñ Funci√≥n de chat activada');
    console.log('üìù Mensaje recibido:', message.substring(0, 100) + '...');
    console.log('üìä Contexto recibido (longitud):', userContext ? userContext.length : 0);

    // Generar respuesta inteligente basada en palabras clave
    const response = generateFallbackResponse(message, userContext);

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        response: response,
        model: 'fallback-intelligent',
        reasoning_level: reasoning_level
      }),
    };

  } catch (error) {
    console.error('Error en funci√≥n de chat:', error);

    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        error: 'Error interno del servidor',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined,
      }),
    };
  }
}; 